name: Django CI & Release

on:
  push:
    branches: [ new_branch ]
    # از لوپ جلوگیری می‌کنیم؛ تغییرات فقط روی فایل VERSION CI رو تریگر نکنه
    paths-ignore:
      - 'VERSION'
  pull_request:
    branches: [ new_branch ]

permissions:
  contents: write    # برای ساخت تگ و ریلیز لازم است

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # برای دسترسی به تگ‌ها لازم است

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          pytest

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/new_branch'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next version (>= 1.2.1) based on commits since last tag
        id: version
        shell: bash
        run: |
          set -euo pipefail

          BASELINE="1.2.1"

          # آخرین تگ نسخه‌ای را پیدا کن
          LAST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            PREV="1.2.0"
          else
            PREV="${LAST_TAG#v}"
          fi

          # تابع مقایسه‌ی سمور
          semver_cmp () {
            local IFS=.
            local i ver1=($1) ver2=($2)
            # پر کردن با صفر برای طول برابر
            for ((i=${#ver1[@]}; i<3; i++)); do ver1[i]=0; done
            for ((i=${#ver2[@]}; i<3; i++)); do ver2[i]=0; done
            for ((i=0; i<3; i++)); do
              if ((10#${ver1[i]} > 10#${ver2[i]})); then echo 1; return; fi
              if ((10#${ver1[i]} < 10#${ver2[i]})); then echo -1; return; fi
            done
            echo 0
          }

          # اگر PREV < BASELINE، شروع را از 1.2.0 قرار می‌دهیم تا bump بعدی >=1.2.1 شود
          if [[ "$(semver_cmp "$PREV" "$BASELINE")" -lt 0 ]]; then
            PREV="1.2.0"
            LAST_TAG=""  # لاگ از ابتدا
          fi

          COMMITS_RANGE="HEAD"
          if [[ -n "$LAST_TAG" ]]; then
            COMMITS_RANGE="${LAST_TAG}..HEAD"
          fi
          COMMITS=$(git log --pretty=format:%s%n%b $COMMITS_RANGE || true)

          # نوع bump
          BUMP="patch"
          if echo "$COMMITS" | grep -qiE 'BREAKING CHANGE|!:'; then
            BUMP="major"
          elif echo "$COMMITS" | grep -qiE '^feat(\(.+\))?: '; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -qiE '^(fix|perf|refactor)(\(.+\))?: '; then
            BUMP="patch"
          else
            BUMP="patch"
          fi

          IFS='.' read -r MA MI PA <<< "$PREV"
          MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}

          case "$BUMP" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
          esac

          NEW_VERSION="${MA}.${MI}.${PA}"

          # اطمینان از >= 1.2.1
          if [[ "$(semver_cmp "$NEW_VERSION" "$BASELINE")" -lt 0 ]]; then
            NEW_VERSION="$BASELINE"
          fi

          TAG="v${NEW_VERSION}"

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # اگر تگ وجود دارد، Skip
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

          # تولید فایل VERSION برای آرشیو/اتست
          echo -n "${NEW_VERSION}" > VERSION

      - name: Upload VERSION artifact
        uses: actions/upload-artifact@v4
        with:
          name: VERSION-${{ steps.version.outputs.new_version }}
          path: VERSION

      - name: Attest Build Provenance
        if: steps.version.outputs.exists == 'false'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: VERSION

      - name: Create tag
        if: steps.version.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        if: steps.version.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            Automated release from CI.
            Base branch: ${{ github.ref_name }}
            Version: ${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            VERSION
